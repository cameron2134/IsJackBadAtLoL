@page "/"

<PageTitle>League of Feeders</PageTitle>

@using Core.DTOs
@using Core.Enums
@using WebApp.Components
@using WebApp.Services
@inject MatchDataService _matchDataService

@if (!_dataLoaded)
{
    <p><em>Data is loading...</em></p>
}
else
{
    <div id="div-center">

       <div class="dropdown" style="margin-bottom: 25px;">
          <button class="btn btn-secondary dropdown-toggle" type="button" id="dropdownMenuButton1" data-bs-toggle="dropdown" aria-expanded="false">
            Pick a feeder!
          </button>
          <ul class="dropdown-menu" aria-labelledby="dropdownMenuButton1">
                @foreach (var summoner in _summoners)
                {
                    <li><a class="dropdown-item" href="" @onclick="() => LoadSummonerData(summoner.ID)">@summoner.Nickname</a></li>
                }
          </ul>
        </div>

    <h1>Is @_currentSummonerNickname bad at LoL?</h1>

    <p>Based on the past <b><span style="font-size:26px;">@_summonerStatistics.TotalMatchesTracked</span></b> matches...</p>
    <p>@_currentSummonerNickname has <span style="font-size:26px;">died</span> a total of <span class="redTxt" style="font-size: 26px;">@_summonerStatistics.TotalDeaths</span> times...</p>
    <p>...and spent a total of <span class="redTxt" style="font-size:26px;">@_summonerStatistics.TotalTimeSpentDead.Hours hours and @_summonerStatistics.TotalTimeSpentDead.Minutes minutes</span>  dead...</p>

    <hr style="width: 35%; margin: auto" />

    <h1 style="margin-top: 25px;">Last week's top feeder was: <b>@_weeklyFeeder.SummonerNickname</b>!</h1>
    <p>...whose K/D ratio was <span class="redTxt" style="font-size: 26px;">@_weeklyFeeder.TotalKills/@_weeklyFeeder.TotalDeaths</span> for the week</p> 

</div>
        <div class="container mt-5 mb-3">

            <div class="row">
            <h2>Highlight Reel</h2>
            <h5>@_currentSummonerNickname's worst matches for the past week</h5>

            @if (!_weeklyHighlights.Any())
            {
                <p style="margin-top: 25px;">@_currentSummonerNickname hasn't played enough games this week :(</p>
            }

            @foreach (var highlight in _weeklyHighlights)
            {
                <MatchCard SummonerName = "@_currentSummonerNickname" Highlight = "highlight"/>
            }
            </div>
        </div>
    <div class="container mt-5 mb-3">
        <hr />

        <h2>All Matches</h2>

        <div style="margin-bottom: 30px;">
            <h6>Filter by:</h6>

            <button class="btn btn-secondary @(_currentFilterType == MatchTypeEnum.All ? "filter-btn-active" : "")" type="button" @onclick="() => SetFilterOption(MatchTypeEnum.All)">All</button>
            <button class="btn btn-secondary @(_currentFilterType == MatchTypeEnum.Classic ? "filter-btn-active" : "")" type="button" @onclick="() => SetFilterOption(MatchTypeEnum.Classic)">Normal</button>
            <button class="btn btn-secondary @(_currentFilterType == MatchTypeEnum.Aram ? "filter-btn-active" : "")" type="button" @onclick="() => SetFilterOption(MatchTypeEnum.Aram)">ARAM</button>
            <button class="btn btn-secondary @(_currentFilterType == MatchTypeEnum.Urf ? "filter-btn-active" : "")" type="button" @onclick="() => SetFilterOption(MatchTypeEnum.Urf)">URF</button>
          </div>

        <h5>Showing the most recent @_currentMatchCount matches</h5>

        <div class="row">

            @foreach (var match in _matchHistory) 
            {
                <MatchCard SummonerName = "@_currentSummonerNickname" Highlight = "match"/>
            }
    
        <button @onclick="LoadFewerMatches" class="btn btn-primary">Load Fewer</button>
        <button @onclick="LoadMoreMatches" class="btn btn-primary">Load More</button>
    </div>
    </div>
}

@code {
    private IEnumerable<SummonerDTO> _summoners;
    private IEnumerable<MatchDataDTO> _weeklyHighlights;

    private List<MatchDataDTO> _matchHistory;
    private WeeklyFeederDTO _weeklyFeeder;
    private GlobalStatisticsDTO _summonerStatistics;

    private string _currentSummonerNickname;

    private int _currentMatchCount = 9;
    private int _currentSummonerID = 1;

    private bool _dataLoaded = false;

    private MatchTypeEnum _currentFilterType = MatchTypeEnum.All;

    protected override async Task OnInitializedAsync()
    {
        _weeklyFeeder = await _matchDataService.GetWeeklyFeeder();
        _summoners = await _matchDataService.GetSummoners();

        await RefreshData();
        _dataLoaded = true;
    }

    private async Task RefreshData()
    {
        var matchHistoryRecs = await _matchDataService.GetMatchHistory(_currentSummonerID);
        _matchHistory = matchHistoryRecs.ToList();

        _weeklyHighlights = await _matchDataService.GetWeeklyHighlights(_currentSummonerID);
        _currentSummonerNickname = await _matchDataService.GetSummonerNickname(_currentSummonerID);
        _summonerStatistics = await _matchDataService.GetOverallStatistics(_currentSummonerID);
    }

    private async Task LoadMoreMatches()
    {
        var totalMatches = await _matchDataService.GetTotalSummonerMatches(_currentSummonerID, _currentFilterType);
        if (_currentMatchCount >= totalMatches)
            return;

        var nextRecordBatch = await _matchDataService.GetMatchHistory(_currentSummonerID, _currentFilterType, 9, _currentMatchCount);
        _matchHistory.AddRange(nextRecordBatch);

        _currentMatchCount += 9;
    }

    private void LoadFewerMatches()
    {
        if (_currentMatchCount == 9)
            return;

        int diff = _matchHistory.Count % 9;
        if (diff != 0)
        {
            _matchHistory.RemoveRange(_matchHistory.Count - diff, diff);
            _currentMatchCount -= 9;
        }

        else
        {
            _matchHistory.RemoveRange(_matchHistory.Count - 9, 9);
            _currentMatchCount -= 9;
        }
    }

    private async Task LoadSummonerData(int summonerID)
    {
        _currentFilterType = MatchTypeEnum.All;
        _currentSummonerID = summonerID;
        _currentMatchCount = 9;

        await RefreshData();
    }

    private async Task SetFilterOption(MatchTypeEnum matchType)
    {
        _currentFilterType = matchType;

        var matchHistoryRecs = await _matchDataService.GetMatchHistory(_currentSummonerID, matchType);
        _matchHistory = matchHistoryRecs.ToList();

        _currentMatchCount = 9;
    }
}