@using Core.DTOs

@{
    var timings = GetTimeConversion();
}

<div class="col-md-4">
                        <div class="card p-3 mb-2">
                            <div class="d-flex justify-content-between">
                                <div class="d-flex flex-row align-items-center">
                                    <div class="ms-2 c-details">
                                        <h4 class="mb-0">@Highlight.Champion</h4> 
                                        <span id="daysAgo">@Highlight.GameMode - @timings.Item1 @timings.Item2 ago</span>
                                    </div>
                                </div>
                                    @if (Highlight.Victory)
                                    {
                                        <div class="badge badge-win"> 
                                            <span>Win</span>
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="badge badge-lose"> 
                                            <span>Loss</span>
                                        </div>
                                    }
                            </div>
                            <div class="mt-5">
                                <h3 class="heading">Kills: @Highlight.Kills<br>Deaths: @Highlight.Deaths<br />Assists: @Highlight.Assists</h3>
                                <div class="mt-5">

                                
                                    <div class="mt-3"><span class="text2">@SummonerName spent </span>
                                    
                                        <span class="text1">
                                            @if (Highlight.TimeSpentDead.Minutes > 0)
                                            {
                                                timeSpentDead = Highlight.TimeSpentDead.Minutes;
                                                @Highlight.TimeSpentDead.Minutes;
                                                <span> minutes</span>
                                            }

                                            else
                                            {
                                                timeSpentDead = ((double)Highlight.TimeSpentDead.Seconds / 60);
                                                @Highlight.TimeSpentDead.Seconds;
                                                <span> seconds</span>
                                            }
                                            dead<span class="text2"> in a @Highlight.MatchLength.Minutes minute match</span></span> 
                                        </div>
                                </div>

                                    <div class="progress">
                                        <div class="progress-bar" role="progressbar" style="width: @((timeSpentDead * 100) / Highlight.MatchLength.Minutes)%" aria-valuenow="50" aria-valuemin="0" aria-valuemax="100"></div>
                                    </div>
                            </div>
                        </div>
                </div>

@code {

    [Parameter]
    public MatchDataDTO Highlight { get; set; }

    [Parameter]
    public string SummonerName { get; set; }

    private double timeSpentDead = 0;

    private Tuple<int, string> GetTimeConversion()
    {
        int hours = (int)((DateTime.UtcNow - Highlight.MatchStartTimeUTC).TotalHours);
        int days = (int)((DateTime.UtcNow - Highlight.MatchStartTimeUTC).TotalDays);
        int weeks = days / 7;
        int months = weeks / 4;
        int years = months / 12;

        if (days >= 1 && weeks == 0)
            return new Tuple<int, string>(days, (days > 1) ? "days" : "day");
        else if (weeks >= 1 && months == 0)
            return new Tuple<int, string>(weeks, (weeks > 1) ? "weeks" : "week");
        else if (months >= 1 && years == 0)
            return new Tuple<int, string>(months, (months > 1) ? "months" : "month");
        else if (years >= 1)
            return new Tuple<int, string>(years, (years > 1) ? "years" : "year");
        else
            return new Tuple<int, string>(hours, (hours > 1) ? "hours" : "hour");
    }
}
